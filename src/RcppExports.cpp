// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// gibbs_2
arma::mat gibbs_2(arma::mat R, arma::mat F, arma::mat X, arma::mat Xi, arma::mat Z, size_t T, size_t N, size_t K, size_t M, size_t nsamp, size_t burnin, double tau);
RcppExport SEXP _BayesPortfolio_gibbs_2(SEXP RSEXP, SEXP FSEXP, SEXP XSEXP, SEXP XiSEXP, SEXP ZSEXP, SEXP TSEXP, SEXP NSEXP, SEXP KSEXP, SEXP MSEXP, SEXP nsampSEXP, SEXP burninSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xi(XiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< size_t >::type T(TSEXP);
    Rcpp::traits::input_parameter< size_t >::type N(NSEXP);
    Rcpp::traits::input_parameter< size_t >::type K(KSEXP);
    Rcpp::traits::input_parameter< size_t >::type M(MSEXP);
    Rcpp::traits::input_parameter< size_t >::type nsamp(nsampSEXP);
    Rcpp::traits::input_parameter< size_t >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_2(R, F, X, Xi, Z, T, N, K, M, nsamp, burnin, tau));
    return rcpp_result_gen;
END_RCPP
}
// gibbs
arma::mat gibbs(arma::mat R, arma::mat F, arma::mat X, arma::mat Xi, arma::mat Z, size_t T, size_t N, size_t K, size_t M, size_t nsamp, size_t burnin, double tau);
RcppExport SEXP _BayesPortfolio_gibbs(SEXP RSEXP, SEXP FSEXP, SEXP XSEXP, SEXP XiSEXP, SEXP ZSEXP, SEXP TSEXP, SEXP NSEXP, SEXP KSEXP, SEXP MSEXP, SEXP nsampSEXP, SEXP burninSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xi(XiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< size_t >::type T(TSEXP);
    Rcpp::traits::input_parameter< size_t >::type N(NSEXP);
    Rcpp::traits::input_parameter< size_t >::type K(KSEXP);
    Rcpp::traits::input_parameter< size_t >::type M(MSEXP);
    Rcpp::traits::input_parameter< size_t >::type nsamp(nsampSEXP);
    Rcpp::traits::input_parameter< size_t >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs(R, F, X, Xi, Z, T, N, K, M, nsamp, burnin, tau));
    return rcpp_result_gen;
END_RCPP
}
// rmultireg_IG_singlerun
List rmultireg_IG_singlerun(arma::mat const& Y, arma::mat const& X, arma::mat const& betabar_all, arma::mat const& A, double nu, arma::mat& beta_mat, arma::vec& sigmasq_vec);
RcppExport SEXP _BayesPortfolio_rmultireg_IG_singlerun(SEXP YSEXP, SEXP XSEXP, SEXP betabar_allSEXP, SEXP ASEXP, SEXP nuSEXP, SEXP beta_matSEXP, SEXP sigmasq_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type betabar_all(betabar_allSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta_mat(beta_matSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sigmasq_vec(sigmasq_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(rmultireg_IG_singlerun(Y, X, betabar_all, A, nu, beta_mat, sigmasq_vec));
    return rcpp_result_gen;
END_RCPP
}
// rmultireg_IG
List rmultireg_IG(arma::mat const& Y, arma::mat const& X, arma::mat const& betabar_all, arma::mat const& A, double nu, int R, int keep);
RcppExport SEXP _BayesPortfolio_rmultireg_IG(SEXP YSEXP, SEXP XSEXP, SEXP betabar_allSEXP, SEXP ASEXP, SEXP nuSEXP, SEXP RSEXP, SEXP keepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type betabar_all(betabar_allSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type keep(keepSEXP);
    rcpp_result_gen = Rcpp::wrap(rmultireg_IG(Y, X, betabar_all, A, nu, R, keep));
    return rcpp_result_gen;
END_RCPP
}
// rmultireg_IGsinglerun
List rmultireg_IGsinglerun(arma::mat const& Y, arma::mat const& X, arma::mat const& Bbar, arma::mat const& A, double nu, arma::mat const& V);
RcppExport SEXP _BayesPortfolio_rmultireg_IGsinglerun(SEXP YSEXP, SEXP XSEXP, SEXP BbarSEXP, SEXP ASEXP, SEXP nuSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Bbar(BbarSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(rmultireg_IGsinglerun(Y, X, Bbar, A, nu, V));
    return rcpp_result_gen;
END_RCPP
}
// runireg_singlerun
List runireg_singlerun(arma::vec const& y, arma::mat const& X, arma::vec const& betabar, arma::mat const& A, double nu, double ssq);
RcppExport SEXP _BayesPortfolio_runireg_singlerun(SEXP ySEXP, SEXP XSEXP, SEXP betabarSEXP, SEXP ASEXP, SEXP nuSEXP, SEXP ssqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type betabar(betabarSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type ssq(ssqSEXP);
    rcpp_result_gen = Rcpp::wrap(runireg_singlerun(y, X, betabar, A, nu, ssq));
    return rcpp_result_gen;
END_RCPP
}
// runireg
List runireg(arma::vec const& y, arma::mat const& X, arma::vec const& betabar, arma::mat const& A, double nu, double ssq, int R, int keep, int nprint);
RcppExport SEXP _BayesPortfolio_runireg(SEXP ySEXP, SEXP XSEXP, SEXP betabarSEXP, SEXP ASEXP, SEXP nuSEXP, SEXP ssqSEXP, SEXP RSEXP, SEXP keepSEXP, SEXP nprintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type betabar(betabarSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type ssq(ssqSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< int >::type nprint(nprintSEXP);
    rcpp_result_gen = Rcpp::wrap(runireg(y, X, betabar, A, nu, ssq, R, keep, nprint));
    return rcpp_result_gen;
END_RCPP
}
// runiregGibbs
List runiregGibbs(arma::vec const& y, arma::mat const& X, arma::vec const& betabar, arma::mat const& A, double nu, double ssq, double sigmasq, int R, int keep, int nprint);
RcppExport SEXP _BayesPortfolio_runiregGibbs(SEXP ySEXP, SEXP XSEXP, SEXP betabarSEXP, SEXP ASEXP, SEXP nuSEXP, SEXP ssqSEXP, SEXP sigmasqSEXP, SEXP RSEXP, SEXP keepSEXP, SEXP nprintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type betabar(betabarSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type ssq(ssqSEXP);
    Rcpp::traits::input_parameter< double >::type sigmasq(sigmasqSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< int >::type nprint(nprintSEXP);
    rcpp_result_gen = Rcpp::wrap(runiregGibbs(y, X, betabar, A, nu, ssq, sigmasq, R, keep, nprint));
    return rcpp_result_gen;
END_RCPP
}
// rmatNorm
arma::mat rmatNorm(arma::mat& M, arma::mat& U, arma::mat& V);
RcppExport SEXP _BayesPortfolio_rmatNorm(SEXP MSEXP, SEXP USEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(rmatNorm(M, U, V));
    return rcpp_result_gen;
END_RCPP
}
// rwishart_bayesm
Rcpp::List rwishart_bayesm(double nu, arma::mat const& V);
RcppExport SEXP _BayesPortfolio_rwishart_bayesm(SEXP nuSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(rwishart_bayesm(nu, V));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesPortfolio_gibbs_2", (DL_FUNC) &_BayesPortfolio_gibbs_2, 12},
    {"_BayesPortfolio_gibbs", (DL_FUNC) &_BayesPortfolio_gibbs, 12},
    {"_BayesPortfolio_rmultireg_IG_singlerun", (DL_FUNC) &_BayesPortfolio_rmultireg_IG_singlerun, 7},
    {"_BayesPortfolio_rmultireg_IG", (DL_FUNC) &_BayesPortfolio_rmultireg_IG, 7},
    {"_BayesPortfolio_rmultireg_IGsinglerun", (DL_FUNC) &_BayesPortfolio_rmultireg_IGsinglerun, 6},
    {"_BayesPortfolio_runireg_singlerun", (DL_FUNC) &_BayesPortfolio_runireg_singlerun, 6},
    {"_BayesPortfolio_runireg", (DL_FUNC) &_BayesPortfolio_runireg, 9},
    {"_BayesPortfolio_runiregGibbs", (DL_FUNC) &_BayesPortfolio_runiregGibbs, 10},
    {"_BayesPortfolio_rmatNorm", (DL_FUNC) &_BayesPortfolio_rmatNorm, 3},
    {"_BayesPortfolio_rwishart_bayesm", (DL_FUNC) &_BayesPortfolio_rwishart_bayesm, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesPortfolio(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
