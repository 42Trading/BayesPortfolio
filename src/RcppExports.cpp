// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// gibbs_2
Rcpp::List gibbs_2(arma::mat R, arma::mat F, arma::mat Z, arma::mat X, double risk, double r_f, size_t nsamps);
RcppExport SEXP _BayesPortfolio_gibbs_2(SEXP RSEXP, SEXP FSEXP, SEXP ZSEXP, SEXP XSEXP, SEXP riskSEXP, SEXP r_fSEXP, SEXP nsampsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type risk(riskSEXP);
    Rcpp::traits::input_parameter< double >::type r_f(r_fSEXP);
    Rcpp::traits::input_parameter< size_t >::type nsamps(nsampsSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_2(R, F, Z, X, risk, r_f, nsamps));
    return rcpp_result_gen;
END_RCPP
}
// gibbs
arma::mat gibbs(arma::mat R, arma::mat F, arma::mat X, arma::mat Xi, arma::mat Z, size_t T, size_t N, size_t K, size_t M, size_t nsamp, size_t burnin, double tau);
RcppExport SEXP _BayesPortfolio_gibbs(SEXP RSEXP, SEXP FSEXP, SEXP XSEXP, SEXP XiSEXP, SEXP ZSEXP, SEXP TSEXP, SEXP NSEXP, SEXP KSEXP, SEXP MSEXP, SEXP nsampSEXP, SEXP burninSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xi(XiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< size_t >::type T(TSEXP);
    Rcpp::traits::input_parameter< size_t >::type N(NSEXP);
    Rcpp::traits::input_parameter< size_t >::type K(KSEXP);
    Rcpp::traits::input_parameter< size_t >::type M(MSEXP);
    Rcpp::traits::input_parameter< size_t >::type nsamp(nsampSEXP);
    Rcpp::traits::input_parameter< size_t >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs(R, F, X, Xi, Z, T, N, K, M, nsamp, burnin, tau));
    return rcpp_result_gen;
END_RCPP
}
// log_posterior
Rcpp::List log_posterior(arma::mat R, arma::mat F, arma::mat Z, arma::mat X);
RcppExport SEXP _BayesPortfolio_log_posterior(SEXP RSEXP, SEXP FSEXP, SEXP ZSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(log_posterior(R, F, Z, X));
    return rcpp_result_gen;
END_RCPP
}
// rmultireg_IG_singlerun_alone
List rmultireg_IG_singlerun_alone(arma::mat const& Y, arma::mat const& X, arma::mat const& betabar_all, arma::mat const& A, double nu);
RcppExport SEXP _BayesPortfolio_rmultireg_IG_singlerun_alone(SEXP YSEXP, SEXP XSEXP, SEXP betabar_allSEXP, SEXP ASEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type betabar_all(betabar_allSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(rmultireg_IG_singlerun_alone(Y, X, betabar_all, A, nu));
    return rcpp_result_gen;
END_RCPP
}
// rmultireg_IG_singlerun
void rmultireg_IG_singlerun(arma::mat const& Y, arma::mat const& X, arma::mat const& betabar_all, arma::mat const& A, double nu, arma::mat& beta_mat, arma::vec& sigmasq_vec);
RcppExport SEXP _BayesPortfolio_rmultireg_IG_singlerun(SEXP YSEXP, SEXP XSEXP, SEXP betabar_allSEXP, SEXP ASEXP, SEXP nuSEXP, SEXP beta_matSEXP, SEXP sigmasq_vecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type betabar_all(betabar_allSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta_mat(beta_matSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sigmasq_vec(sigmasq_vecSEXP);
    rmultireg_IG_singlerun(Y, X, betabar_all, A, nu, beta_mat, sigmasq_vec);
    return R_NilValue;
END_RCPP
}
// rmultireg_IG
List rmultireg_IG(arma::mat const& Y, arma::mat const& X, arma::mat const& betabar_all, arma::mat const& A, double nu, size_t R, size_t keep);
RcppExport SEXP _BayesPortfolio_rmultireg_IG(SEXP YSEXP, SEXP XSEXP, SEXP betabar_allSEXP, SEXP ASEXP, SEXP nuSEXP, SEXP RSEXP, SEXP keepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type betabar_all(betabar_allSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< size_t >::type R(RSEXP);
    Rcpp::traits::input_parameter< size_t >::type keep(keepSEXP);
    rcpp_result_gen = Rcpp::wrap(rmultireg_IG(Y, X, betabar_all, A, nu, R, keep));
    return rcpp_result_gen;
END_RCPP
}
// rmultireg_IW_singlerun
void rmultireg_IW_singlerun(arma::mat const& Y, arma::mat const& X, arma::mat const& Bbar, arma::mat const& A, double nu, arma::mat const& V, arma::mat& B, arma::mat& Sigma);
RcppExport SEXP _BayesPortfolio_rmultireg_IW_singlerun(SEXP YSEXP, SEXP XSEXP, SEXP BbarSEXP, SEXP ASEXP, SEXP nuSEXP, SEXP VSEXP, SEXP BSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Bbar(BbarSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Sigma(SigmaSEXP);
    rmultireg_IW_singlerun(Y, X, Bbar, A, nu, V, B, Sigma);
    return R_NilValue;
END_RCPP
}
// runireg_BP
List runireg_BP(arma::vec const& y, arma::mat const& X, arma::vec const& betabar, arma::mat const& A, double nu, double ssq, size_t R, size_t keep, size_t nprint);
RcppExport SEXP _BayesPortfolio_runireg_BP(SEXP ySEXP, SEXP XSEXP, SEXP betabarSEXP, SEXP ASEXP, SEXP nuSEXP, SEXP ssqSEXP, SEXP RSEXP, SEXP keepSEXP, SEXP nprintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type betabar(betabarSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type ssq(ssqSEXP);
    Rcpp::traits::input_parameter< size_t >::type R(RSEXP);
    Rcpp::traits::input_parameter< size_t >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< size_t >::type nprint(nprintSEXP);
    rcpp_result_gen = Rcpp::wrap(runireg_BP(y, X, betabar, A, nu, ssq, R, keep, nprint));
    return rcpp_result_gen;
END_RCPP
}
// runireg_singlerun
void runireg_singlerun(arma::vec const& y, arma::mat const& X, arma::vec const& betabar, arma::mat const& A, double nu, double ssq, arma::vec& beta, double& sigmasq);
RcppExport SEXP _BayesPortfolio_runireg_singlerun(SEXP ySEXP, SEXP XSEXP, SEXP betabarSEXP, SEXP ASEXP, SEXP nuSEXP, SEXP ssqSEXP, SEXP betaSEXP, SEXP sigmasqSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type betabar(betabarSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type ssq(ssqSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double& >::type sigmasq(sigmasqSEXP);
    runireg_singlerun(y, X, betabar, A, nu, ssq, beta, sigmasq);
    return R_NilValue;
END_RCPP
}
// runiregGibbs
List runiregGibbs(arma::vec const& y, arma::mat const& X, arma::vec const& betabar, arma::mat const& A, double nu, double ssq, double sigmasq, size_t R, size_t keep, size_t nprint);
RcppExport SEXP _BayesPortfolio_runiregGibbs(SEXP ySEXP, SEXP XSEXP, SEXP betabarSEXP, SEXP ASEXP, SEXP nuSEXP, SEXP ssqSEXP, SEXP sigmasqSEXP, SEXP RSEXP, SEXP keepSEXP, SEXP nprintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type betabar(betabarSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type ssq(ssqSEXP);
    Rcpp::traits::input_parameter< double >::type sigmasq(sigmasqSEXP);
    Rcpp::traits::input_parameter< size_t >::type R(RSEXP);
    Rcpp::traits::input_parameter< size_t >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< size_t >::type nprint(nprintSEXP);
    rcpp_result_gen = Rcpp::wrap(runiregGibbs(y, X, betabar, A, nu, ssq, sigmasq, R, keep, nprint));
    return rcpp_result_gen;
END_RCPP
}
// sampler1
Rcpp::List sampler1(arma::mat& R, arma::mat& F, size_t nsamps, size_t burnin);
RcppExport SEXP _BayesPortfolio_sampler1(SEXP RSEXP, SEXP FSEXP, SEXP nsampsSEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type F(FSEXP);
    Rcpp::traits::input_parameter< size_t >::type nsamps(nsampsSEXP);
    Rcpp::traits::input_parameter< size_t >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(sampler1(R, F, nsamps, burnin));
    return rcpp_result_gen;
END_RCPP
}
// sampler2
Rcpp::List sampler2(arma::mat& R, arma::mat& F, arma::mat Z, size_t nsamps, size_t burnin, double gamma, double r_f, bool icept_z_only);
RcppExport SEXP _BayesPortfolio_sampler2(SEXP RSEXP, SEXP FSEXP, SEXP ZSEXP, SEXP nsampsSEXP, SEXP burninSEXP, SEXP gammaSEXP, SEXP r_fSEXP, SEXP icept_z_onlySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< size_t >::type nsamps(nsampsSEXP);
    Rcpp::traits::input_parameter< size_t >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type r_f(r_fSEXP);
    Rcpp::traits::input_parameter< bool >::type icept_z_only(icept_z_onlySEXP);
    rcpp_result_gen = Rcpp::wrap(sampler2(R, F, Z, nsamps, burnin, gamma, r_f, icept_z_only));
    return rcpp_result_gen;
END_RCPP
}
// rmatNorm
arma::mat rmatNorm(arma::mat& M, arma::mat& U, arma::mat& V);
RcppExport SEXP _BayesPortfolio_rmatNorm(SEXP MSEXP, SEXP USEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(rmatNorm(M, U, V));
    return rcpp_result_gen;
END_RCPP
}
// Mahalanobis
arma::vec Mahalanobis(arma::mat x, arma::rowvec center, arma::mat cov);
RcppExport SEXP _BayesPortfolio_Mahalanobis(SEXP xSEXP, SEXP centerSEXP, SEXP covSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type center(centerSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov(covSEXP);
    rcpp_result_gen = Rcpp::wrap(Mahalanobis(x, center, cov));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_arma
arma::vec dmvnorm_arma(arma::mat x, arma::rowvec mean, arma::mat sigma, bool log);
RcppExport SEXP _BayesPortfolio_dmvnorm_arma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_arma(x, mean, sigma, log));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesPortfolio_gibbs_2", (DL_FUNC) &_BayesPortfolio_gibbs_2, 7},
    {"_BayesPortfolio_gibbs", (DL_FUNC) &_BayesPortfolio_gibbs, 12},
    {"_BayesPortfolio_log_posterior", (DL_FUNC) &_BayesPortfolio_log_posterior, 4},
    {"_BayesPortfolio_rmultireg_IG_singlerun_alone", (DL_FUNC) &_BayesPortfolio_rmultireg_IG_singlerun_alone, 5},
    {"_BayesPortfolio_rmultireg_IG_singlerun", (DL_FUNC) &_BayesPortfolio_rmultireg_IG_singlerun, 7},
    {"_BayesPortfolio_rmultireg_IG", (DL_FUNC) &_BayesPortfolio_rmultireg_IG, 7},
    {"_BayesPortfolio_rmultireg_IW_singlerun", (DL_FUNC) &_BayesPortfolio_rmultireg_IW_singlerun, 8},
    {"_BayesPortfolio_runireg_BP", (DL_FUNC) &_BayesPortfolio_runireg_BP, 9},
    {"_BayesPortfolio_runireg_singlerun", (DL_FUNC) &_BayesPortfolio_runireg_singlerun, 8},
    {"_BayesPortfolio_runiregGibbs", (DL_FUNC) &_BayesPortfolio_runiregGibbs, 10},
    {"_BayesPortfolio_sampler1", (DL_FUNC) &_BayesPortfolio_sampler1, 4},
    {"_BayesPortfolio_sampler2", (DL_FUNC) &_BayesPortfolio_sampler2, 8},
    {"_BayesPortfolio_rmatNorm", (DL_FUNC) &_BayesPortfolio_rmatNorm, 3},
    {"_BayesPortfolio_Mahalanobis", (DL_FUNC) &_BayesPortfolio_Mahalanobis, 3},
    {"_BayesPortfolio_dmvnorm_arma", (DL_FUNC) &_BayesPortfolio_dmvnorm_arma, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesPortfolio(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
